class TwitchChat {
    constructor() {
        this.socket = null;
        this.channel = '';
        this.isConnected = false;
        this.messageCount = 0;
        this.maxMessages = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
        
        // –ö—ç—à –¥–ª—è –±–µ–π–¥–∂–µ–π
        this.badgeCache = new Map();
        this.twitchClientId = 'kimne78kx3ncx6brgo4mv6wki5h1ko'; // –ü—É–±–ª–∏—á–Ω—ã–π Client ID
        
        // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —ç–º–æ–¥–∑–∏ (7TV, BTTV, FFZ)
        this.sevenTVGlobalEmotes = [];
        this.sevenTVChannelEmotes = [];
        this.bttvGlobalEmotes = [];
        this.bttvChannelEmotes = [];
        this.bttvSharedEmotes = [];
        this.ffzGlobalEmotes = [];
        this.ffzChannelEmotes = [];
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.settings = {
            borderWidth: 3,
            borderColor: '#9146ff',
            borderRadius: 10,
            hideBorder: false,
            backgroundImage: '',
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            backgroundOpacity: 100,
            backgroundColor: '#1a1a2e',
            backgroundGradient: 'none',
            gradientColor1: '#1a1a2e',
            gradientColor2: '#16213e',
            gradientDirection: 'to right',
            hideBackground: false,
            fadeMessages: false,
        messageAlignment: 'left',
        borderMode: 'fit-content',
        borderAlignment: 'left',
        chatDirection: 'bottom-to-top',
            appearAnimation: 'none',
            disappearAnimation: 'fade-out',
            // –°—Ç–∞—Ä—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä animationDuration —É–¥–∞–ª–µ–Ω
            // –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–π
            appearDuration: 1000,
            appearDelay: 0,
            disappearDuration: 500,
            messageDisplayTime: 10,
            staggerAnimations: false,
            staggerDelay: 100,
            messageBackgroundColor: '#1a1a1a',
            messageBackgroundOpacity: 80,
            messageBackgroundGradient: 'none',
            messageGradientColor1: '#1a1a1a',
            messageGradientColor2: '#2a2a2a',
            messageGradientDirection: 'to right',
            messageBackgroundImage1: '',
            messageBackgroundImage2: '',
            messageBgSize1: 'cover',
            messageBgPosition1: 'center',
            messageBgSize2: 'cover',
            messageBgPosition2: 'center',
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–Ω–∞—á–∫–æ–≤
            showUserBadges: true,
            showChannelBadges: true,
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
            fontFamily: 'Arial, sans-serif',
            fontSize: 14,
            fontWeight: 400,
            lineHeight: 1.2,
            letterSpacing: 0,
            fontColor: '#ffffff',
            maxMessages: 100,
            messageSpeed: 300,
            chatWidth: 800,
            chatHeight: 600
        };
        
        this.initializeElements();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!this.chatMessagesElement) {
            console.error('chatMessagesElement –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É.');
            return;
        }
        
        this.loadSettings().then(() => {
            this.loadChannelFromURL();
            this.showImageLoadStatus();
        });
        console.log('Chat settings after load:', {
            appearAnimation: this.settings.appearAnimation,
            appearDuration: this.settings.appearDuration
        });
        this.setupMessageListener();
    }
    
    initializeElements() {
        this.chatMessagesElement = document.getElementById('chat-messages');
        this.chatContainer = document.querySelector('.chat-container');
        this.channelNameElement = document.getElementById('channel-name');
        
        console.log('Elements initialized:', {
            chatMessagesElement: this.chatMessagesElement,
            chatContainer: this.chatContainer,
            channelNameElement: this.channelNameElement
        });
        
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç channel-name –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        if (!this.channelNameElement) {
            this.channelNameElement = { textContent: '' };
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    async loadImageSafely(imageUrl) {
        return new Promise((resolve) => {
            if (!imageUrl) {
                resolve('');
                return;
            }
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –µ—Å–ª–∏ –æ–Ω –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω
            try {
                imageUrl = decodeURIComponent(imageUrl);
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL:', imageUrl);
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (file://), –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (window.location.protocol === 'file:') {
                const img = new Image();
                img.onload = () => {
                    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', imageUrl);
                    resolve(imageUrl);
                };
                img.onerror = () => {
                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', imageUrl);
                    console.warn('–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ');
                    resolve(''); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                };
                img.src = imageUrl;
            } else {
                // –î–ª—è –≤–µ–±-—Å–∞–π—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const img = new Image();
                img.onload = () => {
                    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', imageUrl);
                    resolve(imageUrl);
                };
                img.onerror = () => {
                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', imageUrl);
                    resolve(''); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                };
                img.src = imageUrl;
            }
        });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    showImageLoadStatus() {
        if (window.location.protocol === 'file:') {
            const hasBackgroundImage = this.settings.backgroundImage && this.settings.backgroundImage !== '';
            const hasMessageBg1 = this.settings.messageBackgroundImage1 && this.settings.messageBackgroundImage1 !== '';
            const hasMessageBg2 = this.settings.messageBackgroundImage2 && this.settings.messageBackgroundImage2 !== '';
            
            if (hasBackgroundImage || hasMessageBg1 || hasMessageBg2) {
                console.log('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
                console.log('üìÅ –§–∞–π–ª—ã –æ—Ç–∫—Ä—ã—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ (file://)');
                console.log('‚ö†Ô∏è  –í–Ω–µ—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑-–∑–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
                console.log('üí° –†–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏:');
                console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, Live Server –≤ VS Code)');
                console.log('   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π CORS –ø–æ–ª–∏—Ç–∏–∫–æ–π');
                console.log('   3. –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ');
                console.log('   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ)');
                
                if (hasBackgroundImage) {
                    console.log('üñºÔ∏è  –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', this.settings.backgroundImage ? '–∑–∞–≥—Ä—É–∂–µ–Ω–æ' : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
                }
                if (hasMessageBg1) {
                    console.log('üñºÔ∏è  –§–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π 1:', this.settings.messageBackgroundImage1 ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                }
                if (hasMessageBg2) {
                    console.log('üñºÔ∏è  –§–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π 2:', this.settings.messageBackgroundImage2 ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                this.showLocalFileWarning();
            }
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    showLocalFileWarning() {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(255, 193, 7, 0.95);
            color: #000;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            z-index: 10000;
            max-width: 400px;
            font-family: Arial, sans-serif;
            font-size: 14px;
            line-height: 1.4;
        `;
        
        notification.innerHTML = `
            <div style="font-weight: bold; margin-bottom: 8px;">‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã</div>
            <div>–í–Ω–µ—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑-–∑–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.</div>
            <div style="margin-top: 8px; font-size: 12px;">
                üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            </div>
            <button onclick="this.parentElement.remove()" style="
                position: absolute;
                top: 5px;
                right: 8px;
                background: none;
                border: none;
                font-size: 18px;
                cursor: pointer;
                color: #000;
            ">√ó</button>
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 10000);
    }
    
    async loadSettings() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const urlParams = new URLSearchParams(window.location.search);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ URL
        if (urlParams.get('borderWidth')) this.settings.borderWidth = parseInt(urlParams.get('borderWidth'));
        if (urlParams.get('borderColor')) this.settings.borderColor = urlParams.get('borderColor');
        if (urlParams.get('borderRadius')) this.settings.borderRadius = parseInt(urlParams.get('borderRadius'));
        if (urlParams.has('hideBorder')) this.settings.hideBorder = urlParams.get('hideBorder') === 'true';
        if (urlParams.get('backgroundImage')) {
            this.settings.backgroundImage = await this.loadImageSafely(urlParams.get('backgroundImage'));
        }
        if (urlParams.get('backgroundSize')) this.settings.backgroundSize = urlParams.get('backgroundSize');
        if (urlParams.get('backgroundPosition')) this.settings.backgroundPosition = urlParams.get('backgroundPosition');
        if (urlParams.has('hideBackground')) this.settings.hideBackground = urlParams.get('hideBackground') === 'true';
        if (urlParams.has('fadeMessages')) this.settings.fadeMessages = urlParams.get('fadeMessages') === 'true';
        if (urlParams.has('messageAlignment')) this.settings.messageAlignment = urlParams.get('messageAlignment');
        if (urlParams.has('borderMode')) this.settings.borderMode = urlParams.get('borderMode');
        if (urlParams.has('borderAlignment')) this.settings.borderAlignment = urlParams.get('borderAlignment');
        if (urlParams.has('chatDirection')) this.settings.chatDirection = urlParams.get('chatDirection');
        if (urlParams.get('appearAnimation')) this.settings.appearAnimation = urlParams.get('appearAnimation');
        if (urlParams.get('disappearAnimation')) this.settings.disappearAnimation = urlParams.get('disappearAnimation');
        // –°—Ç–∞—Ä—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä animationDuration —É–¥–∞–ª–µ–Ω
        // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–π
        if (urlParams.get('appearDuration')) this.settings.appearDuration = parseInt(urlParams.get('appearDuration'));
        if (urlParams.get('appearDelay')) this.settings.appearDelay = parseInt(urlParams.get('appearDelay'));
        if (urlParams.get('disappearDuration')) this.settings.disappearDuration = parseInt(urlParams.get('disappearDuration'));
        if (urlParams.get('messageDisplayTime')) this.settings.messageDisplayTime = parseFloat(urlParams.get('messageDisplayTime'));
        if (urlParams.get('staggerAnimations')) this.settings.staggerAnimations = urlParams.get('staggerAnimations') === 'true';
        if (urlParams.get('staggerDelay')) this.settings.staggerDelay = parseInt(urlParams.get('staggerDelay'));
        if (urlParams.get('messageBackgroundColor')) this.settings.messageBackgroundColor = urlParams.get('messageBackgroundColor');
        if (urlParams.get('messageBackgroundOpacity')) this.settings.messageBackgroundOpacity = parseInt(urlParams.get('messageBackgroundOpacity'));
        if (urlParams.get('messageBackgroundImage1')) {
            this.settings.messageBackgroundImage1 = await this.loadImageSafely(urlParams.get('messageBackgroundImage1'));
        }
        if (urlParams.get('messageBackgroundImage2')) {
            this.settings.messageBackgroundImage2 = await this.loadImageSafely(urlParams.get('messageBackgroundImage2'));
        }
        if (urlParams.get('messageBgSize1')) this.settings.messageBgSize1 = urlParams.get('messageBgSize1');
        if (urlParams.get('messageBgPosition1')) this.settings.messageBgPosition1 = urlParams.get('messageBgPosition1');
        if (urlParams.get('messageBgSize2')) this.settings.messageBgSize2 = urlParams.get('messageBgSize2');
        if (urlParams.get('messageBgPosition2')) this.settings.messageBgPosition2 = urlParams.get('messageBgPosition2');
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–Ω–∞—á–∫–æ–≤
        if (urlParams.has('showUserBadges')) {
            this.settings.showUserBadges = urlParams.get('showUserBadges') === 'true';
        }
        if (urlParams.has('showChannelBadges')) {
            this.settings.showChannelBadges = urlParams.get('showChannelBadges') === 'true';
        }
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
        if (urlParams.get('fontFamily')) this.settings.fontFamily = urlParams.get('fontFamily');
        if (urlParams.get('fontSize')) this.settings.fontSize = parseInt(urlParams.get('fontSize'));
        if (urlParams.get('fontWeight')) this.settings.fontWeight = parseInt(urlParams.get('fontWeight'));
        if (urlParams.get('lineHeight')) this.settings.lineHeight = parseFloat(urlParams.get('lineHeight'));
        if (urlParams.get('letterSpacing')) this.settings.letterSpacing = parseFloat(urlParams.get('letterSpacing'));
        if (urlParams.get('fontColor')) this.settings.fontColor = urlParams.get('fontColor');
        if (urlParams.get('maxMessages')) this.settings.maxMessages = parseInt(urlParams.get('maxMessages'));
        if (urlParams.get('messageSpeed')) this.settings.messageSpeed = parseInt(urlParams.get('messageSpeed'));
        if (urlParams.get('chatWidth')) this.settings.chatWidth = parseInt(urlParams.get('chatWidth'));
        if (urlParams.get('chatHeight')) this.settings.chatHeight = parseInt(urlParams.get('chatHeight'));
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
        const saved = localStorage.getItem('twitchChatSettings');
        if (saved) {
            try {
                const parsed = JSON.parse(saved);
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã URL
                Object.keys(parsed).forEach(key => {
                    if (!urlParams.has(key)) {
                        this.settings[key] = parsed[key];
                    }
                });
                this.maxMessages = this.settings.maxMessages;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            }
        }
        
        
        this.applySettings();
    }
    
    applySettings() {
        // –†–∞–º–∫–∞
        if (this.settings.hideBorder) {
            this.chatContainer.classList.add('no-border');
        } else {
            this.chatContainer.classList.remove('no-border');
            this.chatContainer.style.borderWidth = this.settings.borderWidth + 'px';
            this.chatContainer.style.borderColor = this.settings.borderColor;
        }
        
        this.chatContainer.style.borderRadius = this.settings.borderRadius + 'px';
        
        // –§–æ–Ω
        if (this.settings.hideBackground) {
            this.chatContainer.classList.add('no-background');
        } else {
            this.chatContainer.classList.remove('no-background');
            
            if (this.settings.backgroundImage) {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                const opacity = this.settings.backgroundOpacity / 100;
                this.chatContainer.style.backgroundImage = `url(${this.settings.backgroundImage})`;
                this.chatContainer.style.backgroundSize = this.settings.backgroundSize;
                this.chatContainer.style.backgroundPosition = this.settings.backgroundPosition;
                this.chatContainer.style.backgroundRepeat = 'no-repeat';
                
                // –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                this.chatContainer.style.position = 'relative';
                this.chatContainer.style.background = 'rgba(255, 255, 255, 0.05)';
                this.chatContainer.style.backdropFilter = 'blur(10px)';
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                const oldOverlay = this.chatContainer.querySelector('.background-overlay');
                if (oldOverlay) {
                    oldOverlay.remove();
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
                const overlay = document.createElement('div');
                overlay.className = 'background-overlay';
                overlay.style.cssText = `
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background-image: url(${this.settings.backgroundImage});
                    background-size: ${this.settings.backgroundSize};
                    background-position: ${this.settings.backgroundPosition};
                    background-repeat: no-repeat;
                    opacity: ${opacity};
                    pointer-events: none;
                    z-index: -1;
                `;
                this.chatContainer.appendChild(overlay);
            } else {
                // –§–æ–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç
                this.chatContainer.style.backgroundImage = '';
                
                // –£–¥–∞–ª—è–µ–º –ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                const oldOverlay = this.chatContainer.querySelector('.background-overlay');
                if (oldOverlay) {
                    oldOverlay.remove();
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç
                if (this.settings.backgroundGradient !== 'none') {
                    const gradient = this.createGradient(
                        this.settings.backgroundGradient,
                        this.settings.gradientColor1,
                        this.settings.gradientColor2,
                        this.settings.gradientDirection
                    );
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    this.chatContainer.style.background = gradient;
                    this.chatContainer.style.backgroundImage = gradient;
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è fallback
                    this.chatContainer.style.setProperty('--gradient-color-1', this.settings.gradientColor1);
                    this.chatContainer.style.setProperty('--gradient-color-2', this.settings.gradientColor2);
                    this.chatContainer.style.setProperty('--gradient-direction', this.settings.gradientDirection);
                } else {
                    this.chatContainer.style.background = this.settings.backgroundColor;
                    this.chatContainer.style.backgroundImage = '';
                }
                
                this.chatContainer.style.backdropFilter = 'blur(10px)';
            }
        }
        
        // –†–∞–∑–º–µ—Ä—ã
        this.chatContainer.style.width = this.settings.chatWidth + 'px';
        this.chatContainer.style.height = this.settings.chatHeight + 'px';
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        this.chatMessagesElement.className = this.chatMessagesElement.className.replace(/align-\w+/g, '');
        this.chatMessagesElement.classList.add(`align-${this.settings.messageAlignment}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–º–∫–∏ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        this.chatMessagesElement.classList.remove('border-full-width', 'border-fit-content');
        this.chatMessagesElement.classList.add(`border-${this.settings.borderMode}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ä–∞–º–∫–∏ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        this.chatMessagesElement.className = this.chatMessagesElement.className.replace(/border-align-\w+/g, '');
        this.chatMessagesElement.classList.add(`border-align-${this.settings.borderAlignment}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
        this.chatMessagesElement.className = this.chatMessagesElement.className.replace(/direction-\w+-\w+/g, '');
        this.chatMessagesElement.classList.add(`direction-${this.settings.chatDirection}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.updateExistingMessages();
        
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
        this.chatMessagesElement.style.fontFamily = this.settings.fontFamily;
        this.chatMessagesElement.style.fontSize = this.settings.fontSize + 'px';
        this.chatMessagesElement.style.fontWeight = this.settings.fontWeight;
        this.chatMessagesElement.style.lineHeight = this.settings.lineHeight;
        this.chatMessagesElement.style.letterSpacing = this.settings.letterSpacing + 'px';
        this.chatMessagesElement.style.color = this.settings.fontColor;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–Ω–∞—á–∫–æ–≤
        
    }
    
    setupMessageListener() {
        // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        window.addEventListener('message', (event) => {
            if (event.data.type === 'UPDATE_SETTINGS') {
                this.settings = { ...this.settings, ...event.data.settings };
                this.maxMessages = this.settings.maxMessages;
                this.applySettings();
            } else if (event.data.type === 'RECONNECT_CHAT') {
                this.reconnectToChat();
            }
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ –∑–∞–≥—Ä—É–∑–∫–µ
        if (window.parent !== window) {
            window.parent.postMessage({ type: 'SETTINGS_LOADED' }, '*');
        }
    }
    
    reconnectToChat() {
        this.disconnect();
        setTimeout(() => {
            this.connectToChat();
        }, 1000);
    }
    
    loadChannelFromURL() {
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const channel = urlParams.get('channel');
            
            if (channel) {
                this.channel = channel.trim();
                this.channelNameElement.textContent = `–ö–∞–Ω–∞–ª: ${this.channel}`;
                this.connectToChat();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    if (!this.isConnected) {
                        this.addSystemMessage(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É ${this.channel}`);
                        this.addSystemMessage('üîó –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞...');
                    }
                }, 3000);
            } else {
                // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω –≤ URL, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
                const savedChannel = localStorage.getItem('twitchChatChannel');
                if (savedChannel) {
                    this.channel = savedChannel;
                    this.channelNameElement.textContent = `–ö–∞–Ω–∞–ª: ${this.channel}`;
                    this.connectToChat();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        if (!this.isConnected) {
                            this.addSystemMessage(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É ${this.channel}`);
                            this.addSystemMessage('üîó –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞...');
                        }
                    }, 3000);
                } else {
                    this.showChannelSetup();
                }
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–∞: ' + error.message);
        }
    }
    
    showChannelSetup() {
        const messagesContainer = this.chatMessagesElement;
        if (!messagesContainer) return;
        
        messagesContainer.innerHTML = `
            <div class="channel-setup">
                <div class="setup-message">
                    <h3>üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞</h3>
                    <p>–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª Twitch.</p>
                    <div class="setup-buttons">
                        <button onclick="window.open('index.html', '_blank')" class="setup-btn primary">
                            ‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
                        </button>
                        <button onclick="location.reload()" class="setup-btn secondary">
                            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        </button>
                    </div>
                    <div class="setup-info">
                        <p><strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong></p>
                        <ol>
                            <li>–ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä"</li>
                            <li>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</li>
                            <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è OBS</li>
                            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ OBS –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
                        </ol>
                    </div>
                </div>
            </div>
        `;
    }
    
    async connectToChat() {
        if (!this.channel) {
            this.showError('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
            return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–∫–∞–∫ –≤ jChat v2)
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
            this.getChannelId().then(channelId => {
                this.channelId = channelId;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ–¥–∑–∏
                this.loadEmotes(channelId);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–µ–π–¥–∂–∏
                this.loadBadges(channelId);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º cheers/bits
                this.loadCheers(channelId);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ–π–¥–∂–∏
                this.loadAdditionalBadges();
                
                console.log('All data loaded for channel:', this.channel);
            });
        } catch (error) {
            console.error('Failed to load channel data:', error);
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ IRC
        this.connectViaIRC();
        
        // –ï—Å–ª–∏ IRC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        setTimeout(() => {
            if (!this.isConnected) {
                this.connectViaAPI();
            }
        }, 2000); // –£–º–µ–Ω—å—à–∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 2 —Å–µ–∫—É–Ω–¥
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        setTimeout(() => {
            if (!this.isConnected) {
                this.addSystemMessage(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É ${this.channel}`);
                this.addSystemMessage('üîó –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞...');
            }
        }, 4000);
    }
    
    connectViaIRC() {
        try {
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Twitch IRC
            this.socket = new WebSocket('wss://irc-ws.chat.twitch.tv:443');
            
            this.socket.onopen = () => {
                console.log('jChat: Connecting to IRC server...');
                // –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫ –≤ jChat v2
                this.socket.send('PASS blah\r\n');
                this.socket.send('NICK justinfan' + Math.floor(Math.random() * 99999) + '\r\n');
                this.socket.send('CAP REQ :twitch.tv/commands twitch.tv/tags\r\n');
                this.socket.send('JOIN #' + this.channel.toLowerCase() + '\r\n');
            };
            
            this.socket.onmessage = (event) => {
                console.log('IRC message received:', event.data);
                event.data.split('\r\n').forEach(line => {
                    if (!line) return;
                    console.log('Processing IRC line:', line);
                    this.parseChatMessage(line);
                });
            };
            
            this.socket.onclose = () => {
                this.isConnected = false;
                console.log('IRC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
            };
            
            this.socket.onerror = (error) => {
                console.log('IRC –æ—à–∏–±–∫–∞:', error);
                this.isConnected = false;
            };
            
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ IRC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.isConnected = false;
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API
    loadEmotes(channelID) {
        this.emotes = {};
        
        // BTTV Global emotes
        fetch('https://api.betterttv.net/3/cached/emotes/global')
                .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                if (Array.isArray(res)) {
                    res.forEach(emote => {
                        this.emotes[emote.code] = {
                            id: emote.id,
                            image: 'https://cdn.betterttv.net/emote/' + emote.id + '/3x',
                            zeroWidth: ["5e76d338d6581c3724c0f0b2", "5e76d399d6581c3724c0f0b8", "567b5b520e984428652809b6", "5849c9a4f52be01a7ee5f79d", "567b5c080e984428652809ba", "567b5dc00e984428652809bd", "58487cc6f52be01a7ee5f205", "5849c9c8f52be01a7ee5f79e"].includes(emote.id)
                        };
                    });
                }
                })
            .catch(err => console.warn('BTTV global emotes error:', err.message));

        // BTTV Channel emotes - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API endpoint
        fetch(`https://api.betterttv.net/3/cached/users/twitch/${channelID}`)
                .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                if (res.channelEmotes && Array.isArray(res.channelEmotes)) {
                    res.channelEmotes.forEach(emote => {
                        this.emotes[emote.code] = {
                            id: emote.id,
                            image: 'https://cdn.betterttv.net/emote/' + emote.id + '/3x',
                            zeroWidth: ["5e76d338d6581c3724c0f0b2", "5e76d399d6581c3724c0f0b8", "567b5b520e984428652809b6", "5849c9a4f52be01a7ee5f79d", "567b5c080e984428652809ba", "567b5dc00e984428652809bd", "58487cc6f52be01a7ee5f205", "5849c9c8f52be01a7ee5f79e"].includes(emote.id)
                        };
                    });
                }
                if (res.sharedEmotes && Array.isArray(res.sharedEmotes)) {
                    res.sharedEmotes.forEach(emote => {
                        this.emotes[emote.code] = {
                            id: emote.id,
                            image: 'https://cdn.betterttv.net/emote/' + emote.id + '/3x',
                            zeroWidth: ["5e76d338d6581c3724c0f0b2", "5e76d399d6581c3724c0f0b8", "567b5b520e984428652809b6", "5849c9a4f52be01a7ee5f79d", "567b5c080e984428652809ba", "567b5dc00e984428652809bd", "58487cc6f52be01a7ee5f205", "5849c9c8f52be01a7ee5f79e"].includes(emote.id)
                        };
                    });
                }
            })
            .catch(err => {
                console.warn('BTTV channel emotes error:', err.message);
                // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ BTTV, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –Ω–µ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç BTTV
            });

        // FFZ Global emotes
        fetch('https://api.betterttv.net/3/cached/frankerfacez/emotes/global')
                .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                if (Array.isArray(res)) {
                    res.forEach(emote => {
                        if (emote.images && emote.images['4x']) {
                            var imageUrl = emote.images['4x'];
                            var upscale = false;
                        } else if (emote.images) {
                            var imageUrl = emote.images['2x'] || emote.images['1x'];
                            var upscale = true;
                        } else {
                            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        }
                        this.emotes[emote.code] = {
                            id: emote.id,
                            image: imageUrl,
                            upscale: upscale
                        };
                    });
                }
                })
            .catch(err => console.warn('FFZ global emotes error:', err.message));

        // FFZ Channel emotes - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API FrankerFaceZ
        fetch(`https://api.frankerfacez.com/v1/room/${channelID}`)
                .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                    }
                return res.json();
            })
            .then(res => {
                if (res.sets && res.sets[res.room.set]) {
                    const emotes = res.sets[res.room.set].emoticons;
                    if (Array.isArray(emotes)) {
                        emotes.forEach(emote => {
                            if (emote.urls && emote.urls['4']) {
                                var imageUrl = emote.urls['4'];
                                var upscale = false;
                            } else if (emote.urls) {
                                var imageUrl = emote.urls['2'] || emote.urls['1'];
                                var upscale = true;
                            } else {
                                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–º–æ–¥–∑–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                            }
                            this.emotes[emote.name] = {
                                id: emote.id,
                                image: imageUrl,
                                upscale: upscale
                            };
                        });
                    }
                }
                })
            .catch(err => {
                console.warn('FFZ channel emotes error:', err.message);
                // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FFZ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –Ω–µ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç FFZ
            });

        // 7TV —ç–º–æ–¥–∑–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API v3
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ 7TV
        fetch('https://7tv.io/v3/emote-sets/global')
            .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                if (res.emotes && Array.isArray(res.emotes)) {
                    res.emotes.forEach(emote => {
                        this.emotes[emote.name] = {
                            id: emote.id,
                            image: `https://cdn.7tv.app/emote/${emote.id}/4x.webp`,
                            animated: emote.animated
                        };
                    });
                }
            })
            .catch(err => {
                console.warn('7TV global emotes error:', err.message);
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API –µ—Å–ª–∏ –Ω–æ–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                return fetch('https://api.7tv.app/v2/emotes/global')
                    .then(res => res.json())
                    .then(res => {
                        if (Array.isArray(res)) {
                            res.forEach(emote => {
                                if (emote.urls && emote.urls.length > 0) {
                                    this.emotes[emote.name] = {
                                        id: emote.id,
                                        image: emote.urls[emote.urls.length - 1][1],
                                        zeroWidth: emote.visibility_simple && emote.visibility_simple.includes("ZERO_WIDTH")
                                    };
                                }
                            });
                        }
                    })
                    .catch(err2 => console.warn('7TV fallback error:', err2.message));
            });

        // 7TV —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞
        fetch(`https://7tv.io/v3/users/twitch/${channelID}`)
            .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                if (res.emote_set && res.emote_set.emotes && Array.isArray(res.emote_set.emotes)) {
                    res.emote_set.emotes.forEach(emote => {
                        this.emotes[emote.name] = {
                            id: emote.id,
                            image: `https://cdn.7tv.app/emote/${emote.id}/4x.webp`,
                            animated: emote.animated
                        };
                    });
                }
            })
            .catch(err => {
                console.warn('7TV channel emotes error:', err.message);
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API –µ—Å–ª–∏ –Ω–æ–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                return fetch(`https://api.7tv.app/v2/users/${encodeURIComponent(channelID)}/emotes`)
                    .then(res => res.json())
                    .then(res => {
                        if (Array.isArray(res)) {
                            res.forEach(emote => {
                                if (emote.urls && emote.urls.length > 0) {
                                    this.emotes[emote.name] = {
                                        id: emote.id,
                                        image: emote.urls[emote.urls.length - 1][1],
                                        zeroWidth: emote.visibility_simple && emote.visibility_simple.includes("ZERO_WIDTH")
                                    };
                                }
                            });
                        }
                    })
                    .catch(err2 => console.warn('7TV channel fallback error:', err2.message));
            });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ 7TV
    async load7TVEmotes() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ 7TV - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∫–∞–∫ –≤ jChat
            const globalResponse = await fetch('https://api.7tv.app/v2/emotes/global');
            if (globalResponse.ok) {
                const globalData = await globalResponse.json();
                this.sevenTVGlobalEmotes = globalData || [];
                console.log('7TV Global emotes loaded:', this.sevenTVGlobalEmotes.length);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞ 7TV
            const channelResponse = await fetch(`https://api.7tv.app/v2/users/${this.channel}/emotes`);
            if (channelResponse.ok) {
                const channelData = await channelResponse.json();
                this.sevenTVChannelEmotes = channelData || [];
                console.log('7TV Channel emotes loaded:', this.sevenTVChannelEmotes.length);
            }
        } catch (error) {
            console.error('Failed to load 7TV emotes:', error);
            this.sevenTVGlobalEmotes = [];
            this.sevenTVChannelEmotes = [];
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ BTTV
    async loadBTTVEmotes() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ BTTV
            const globalResponse = await fetch('https://api.betterttv.net/3/cached/emotes/global');
            if (globalResponse.ok) {
                const globalData = await globalResponse.json();
                this.bttvGlobalEmotes = globalData || [];
                console.log('BTTV Global emotes loaded:', this.bttvGlobalEmotes.length);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞ BTTV
            const channelResponse = await fetch(`https://api.betterttv.net/3/cached/users/twitch/${this.channel}`);
            if (channelResponse.ok) {
                const channelData = await channelResponse.json();
                this.bttvChannelEmotes = channelData.channelEmotes || [];
                this.bttvSharedEmotes = channelData.sharedEmotes || [];
                console.log('BTTV Channel emotes loaded:', this.bttvChannelEmotes.length);
                console.log('BTTV Shared emotes loaded:', this.bttvSharedEmotes.length);
            }
        } catch (error) {
            console.error('Failed to load BTTV emotes:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ FFZ
    async loadFFZEmotes() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ FFZ
            const globalResponse = await fetch('https://api.frankerfacez.com/v1/set/global');
            if (globalResponse.ok) {
                const globalData = await globalResponse.json();
                this.ffzGlobalEmotes = globalData.sets?.global?.emoticons || [];
                console.log('FFZ Global emotes loaded:', this.ffzGlobalEmotes.length);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–∞ FFZ
            const channelResponse = await fetch(`https://api.frankerfacez.com/v1/room/${this.channel}`);
            if (channelResponse.ok) {
                const channelData = await channelResponse.json();
                this.ffzChannelEmotes = channelData.sets?.[Object.keys(channelData.sets)[0]]?.emoticons || [];
                console.log('FFZ Channel emotes loaded:', this.ffzChannelEmotes.length);
            }
        } catch (error) {
            console.error('Failed to load FFZ emotes:', error);
        }
    }
    
    async connectViaAPI() {
        try {
            // Twitch Helix API —Ç—Ä–µ–±—É–µ—Ç OAuth —Ç–æ–∫–µ–Ω, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                    this.isConnected = true;
            this.addSystemMessage(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É: ${this.channel}`);
            this.addSystemMessage('üîó –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞...');
            
        } catch (error) {
            console.log('API –æ—à–∏–±–∫–∞:', error);
            this.isConnected = true;
            this.addSystemMessage(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É: ${this.channel}`);
            this.addSystemMessage('üîó –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞...');
        }
    }
    
    startDemoMessages() {
        // –ú–µ—Ç–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω - –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        return;
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º–∏ IRC —Ç–µ–≥–∞–º–∏
        const demoMessages = [
            { 
                username: 'Viewer1', 
                text: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞? PogChamp', 
                userData: { 
                    color: '#ff6b6b', 
                    badges: 'subscriber/1',
                    'display-name': 'Viewer1',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'GamerPro', 
                text: '–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç—Ä–∏–º! Keep it up! Kappa', 
                userData: { 
                    color: '#4ecdc4', 
                    badges: 'moderator/1',
                    'display-name': 'GamerPro',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'ChatLover', 
                text: '–ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç—Ä–∏–º? monkaS', 
                userData: { 
                    color: '#45b7d1', 
                    badges: 'vip/1',
                    'display-name': 'ChatLover',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'Fan123', 
                text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç! 5Head', 
                userData: { 
                    color: '#96ceb4', 
                    badges: 'subscriber/1',
                    'display-name': 'Fan123',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'StreamerFan', 
                text: '–ú–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã? OMEGALUL', 
                userData: { 
                    color: '#feca57', 
                    badges: '',
                    'display-name': 'StreamerFan',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'ModeratorBot', 
                text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? PepeHands', 
                userData: { 
                    color: '#ff9ff3', 
                    badges: 'moderator/1',
                    'display-name': 'ModeratorBot',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'VIPUser', 
                text: '–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! monkaW', 
                userData: { 
                    color: '#54a0ff', 
                    badges: 'vip/1,subscriber/1',
                    'display-name': 'VIPUser',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'NewViewer', 
                text: '–ü–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–¥–µ—Å—å, –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ! FeelsGoodMan', 
                userData: { 
                    color: '#5f27cd', 
                    badges: '',
                    'display-name': 'NewViewer',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'ChatMaster', 
                text: '–ö–∞–∫–æ–π –∫—Ä—É—Ç–æ–π –¥–∏–∑–∞–π–Ω —á–∞—Ç–∞! POGGERS', 
                userData: { 
                    color: '#ff9f43', 
                    badges: 'subscriber/1',
                    'display-name': 'ChatMaster',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'StreamLover', 
                text: '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç—Ä–∏–º–∏—Ç–µ? monkaS', 
                userData: { 
                    color: '#10ac84', 
                    badges: 'vip/1',
                    'display-name': 'StreamLover',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'GameFan', 
                text: '–ö–∞–∫–∞—è –∏–≥—Ä–∞ —Å–ª–µ–¥—É—é—â–∞—è? 5Head', 
                userData: { 
                    color: '#ee5a24', 
                    badges: '',
                    'display-name': 'GameFan',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'ModHelper', 
                text: '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! Kappa', 
                userData: { 
                    color: '#0984e3', 
                    badges: 'moderator/1',
                    'display-name': 'ModHelper',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'Broadcaster', 
                text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–æ–π —Å—Ç—Ä–∏–º! PogChamp', 
                userData: { 
                    color: '#9146ff', 
                    badges: 'broadcaster/1',
                    'display-name': 'Broadcaster',
                    emotes: null,
                    bits: '0'
                } 
            },
            { 
                username: 'CheerUser', 
                text: 'cheer100 –û—Ç–ª–∏—á–Ω—ã–π —Å—Ç—Ä–∏–º!', 
                userData: { 
                    color: '#9c3ee8', 
                    badges: 'subscriber/1',
                    'display-name': 'CheerUser',
                    emotes: null,
                    bits: '100'
                } 
            },
            { 
                username: 'BigCheer', 
                text: 'cheer1000 –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç!', 
                userData: { 
                    color: '#1db2a5', 
                    badges: 'vip/1',
                    'display-name': 'BigCheer',
                    emotes: null,
                    bits: '1000'
                } 
            }
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–±—ã—Å—Ç—Ä–µ–µ)
        demoMessages.forEach((msg, index) => {
            setTimeout(() => {
                this.addChatMessage(msg.username, msg.text, msg.userData);
            }, (index + 1) * 1000); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (—á–∞—â–µ)
        setInterval(() => {
            if (this.isConnected) {
                const randomMsg = demoMessages[Math.floor(Math.random() * demoMessages.length)];
                this.addChatMessage(randomMsg.username, randomMsg.text, randomMsg.userData);
            }
        }, 5000);
    }
    
    handleMessage(data) {
        const lines = data.split('\r\n');
        
        for (const line of lines) {
            if (line.includes('PRIVMSG')) {
                this.parseChatMessage(line);
            } else if (line.includes('001')) {
                // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                this.isConnected = true;
                this.addSystemMessage(`–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É ${this.channel}`);
            } else if (line.includes('PING')) {
                this.socket.send('PONG :tmi.twitch.tv');
            } else if (line.includes('NOTICE')) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                if (line.includes('Login authentication failed')) {
                    this.showError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.');
                } else if (line.includes('No such channel')) {
                    this.showError(`–ö–∞–Ω–∞–ª ${this.channel} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
                }
            } else if (line.includes('JOIN')) {
                // –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
                this.isConnected = true;
                this.showSuccess(`–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É ${this.channel}`);
            } else if (line.includes('353')) {
                // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ
                this.showInfo('–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞');
            } else if (line.includes('366')) {
                // –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                this.showInfo('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
        }
    }
    
    parseChatMessage(line) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä IRC –∏–∑ jChat v2
        const message = this.parseIRC(line);
        console.log('Parsed IRC message:', message);
        if (!message.command) return;

        switch (message.command) {
            case "PING":
                if (this.socket) {
                    this.socket.send('PONG ' + message.params[0]);
                }
                return;
            case "JOIN":
                console.log('jChat: Joined channel #' + this.channel);
                this.isConnected = true;
                this.addSystemMessage(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É ${this.channel}`);
                return;
            case "CLEARMSG":
                if (message.tags) {
                    this.clearMessage(message.tags['target-msg-id']);
                }
                return;
            case "CLEARCHAT":
                if (message.params[1]) {
                    this.clearChat(message.params[1]);
                }
                return;
            case "PRIVMSG":
                console.log('PRIVMSG received:', message);
                if (message.params[0].toLowerCase() !== '#' + this.channel.toLowerCase() || !message.params[1]) {
                    console.log('PRIVMSG filtered out - wrong channel or no message');
                    return;
                }
                const nick = message.prefix.split('@')[0].split('!')[0];
                console.log('Processing message from:', nick, 'message:', message.params[1]);

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
                if (message.params[1].toLowerCase() === "!refreshoverlay" && typeof(message.tags.badges) === 'string') {
                    let flag = false;
                    message.tags.badges.split(',').forEach(badge => {
                        badge = badge.split('/');
                        if (badge[0] === "moderator" || badge[0] === "broadcaster") {
                            flag = true;
                            return;
                        }
                    });
                    if (flag) {
                        this.loadEmotes(this.channelId);
                        console.log('jChat: Refreshing emotes...');
                        return;
                    }
                }

                // –°–∫—Ä—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥
                if (this.settings.hideCommands) {
                    if (/^!.+/.test(message.params[1])) return;
                }

                // –°–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–æ–≤
                if (!this.settings.showBots) {
                    const bots = ['streamelements', 'streamlabs', 'nightbot', 'moobot', 'fossabot'];
                    if (bots.includes(nick)) return;
                }

                // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–µ–π–¥–∂–µ–π
                if (!this.settings.hideBadges) {
                    if (!this.userBadges) this.userBadges = {};
                    if (!this.userBadges[nick]) {
                        this.loadUserBadges(nick, message.tags['user-id']);
                    }
                }

                this.addChatMessage(nick, message.params[1], message.tags);
                return;
        }
    }

    // –ü–∞—Ä—Å–µ—Ä IRC –∏–∑ jChat v2
    parseIRC(data) {
        const message = {
            raw: data,
            tags: {},
            prefix: null,
            command: null,
            params: []
        };

        let position = 0;
        let nextspace = 0;

        // –ü–∞—Ä—Å–∏–Ω–≥ IRCv3.2 —Ç–µ–≥–æ–≤
        if (data.charCodeAt(0) === 64) {
            nextspace = data.indexOf(' ');

            if (nextspace === -1) {
                return null;
            }

            const rawTags = data.slice(1, nextspace).split(';');

            for (let i = 0; i < rawTags.length; i++) {
                const tag = rawTags[i];
                const pair = tag.split('=');
                message.tags[pair[0]] = pair[1] || true;
            }

            position = nextspace + 1;
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        while (data.charCodeAt(position) === 32) {
            position++;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        if (data.charCodeAt(position) === 58) {
            nextspace = data.indexOf(' ', position);

            if (nextspace === -1) {
                return null;
            }

            message.prefix = data.slice(position + 1, nextspace);
            position = nextspace + 1;

            while (data.charCodeAt(position) === 32) {
                position++;
            }
        }

        nextspace = data.indexOf(' ', position);

        if (nextspace === -1) {
            if (data.length > position) {
                message.command = data.slice(position);
                return message;
            }
            return null;
        }

        message.command = data.slice(position, nextspace);
        position = nextspace + 1;

        while (data.charCodeAt(position) === 32) {
            position++;
        }

        while (position < data.length) {
            nextspace = data.indexOf(' ', position);

            if (data.charCodeAt(position) === 58) {
                message.params.push(data.slice(position + 1));
                break;
            }

            if (nextspace !== -1) {
                message.params.push(data.slice(position, nextspace));
                position = nextspace + 1;

                while (data.charCodeAt(position) === 32) {
                    position++;
                }
                continue;
            }

            if (nextspace === -1) {
                message.params.push(data.slice(position));
                break;
            }
        }
        return message;
    }
    
    parseUserTags(tags) {
        const userData = {};
        const tagPairs = tags.split(';');
        
        tagPairs.forEach(pair => {
            const [key, value] = pair.split('=');
            if (key && value !== undefined) {
                switch (key) {
                    case 'color':
                        // –¶–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IRC —Ç–µ–≥–æ–≤
                        userData.color = value || this.getDefaultUserColor('default');
                        break;
                    case 'badges':
                        if (value) {
                            // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "broadcaster/1,moderator/1,subscriber/6"
                            userData.badges = value.split(',').map(badge => {
                                const [badgeType, badgeVersion] = badge.split('/');
                                return `${badgeType}/${badgeVersion || '1'}`;
                            });
                        } else {
                            userData.badges = [];
                        }
                        break;
                    case 'display-name':
                        userData.displayName = value;
                        break;
                    case 'mod':
                        userData.isMod = value === '1';
                        break;
                    case 'subscriber':
                        userData.isSubscriber = value === '1';
                        break;
                    case 'turbo':
                        userData.isTurbo = value === '1';
                        break;
                    case 'vip':
                        userData.isVip = value === '1';
                        break;
                    case 'broadcaster':
                        userData.isBroadcaster = value === '1';
                        break;
                    case 'user-type':
                        userData.userType = value;
                        break;
                    case 'room-id':
                        userData.roomId = value;
                        break;
                    case 'user-id':
                        userData.userId = value;
                        break;
                    case 'tmi-sent-ts':
                        userData.timestamp = value;
                        break;
                }
            }
        });
        
        return userData;
    }
    
    syncMessageCount() {
        const actualCount = this.chatMessagesElement.querySelectorAll('.message').length;
        this.messageCount = actualCount;
    }
    
    scrollChatToBottom() {
        if (this.chatMessagesElement) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            requestAnimationFrame(() => {
                this.chatMessagesElement.scrollTop = this.chatMessagesElement.scrollHeight;
            });
        }
    }
    
    limitChatMessages() {
        if (!this.chatMessagesElement) return;
        
        const messages = this.chatMessagesElement.querySelectorAll('.message');
        const maxMessages = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        if (messages.length > maxMessages) {
            // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for (let i = 0; i < messages.length - maxMessages; i++) {
                messages[i].remove();
            }
            this.syncMessageCount();
        }
    }
    
    updateExistingMessages() {
        if (!this.chatMessagesElement) return;
        
        const messages = this.chatMessagesElement.querySelectorAll('.message');
        messages.forEach(message => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            message.style.fontFamily = this.settings.fontFamily;
            message.style.fontSize = this.settings.fontSize + 'px';
            message.style.fontWeight = this.settings.fontWeight;
            message.style.lineHeight = this.settings.lineHeight;
            message.style.letterSpacing = this.settings.letterSpacing + 'px';
            message.style.color = this.settings.fontColor;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message.className = message.className.replace(/align-\w+/g, '');
            message.classList.add(`align-${this.settings.messageAlignment}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–º–∫–∏
            message.classList.remove('border-full-width', 'border-fit-content');
            if (this.settings.borderMode === 'full-width') {
                message.classList.add('border-full-width');
            } else {
                message.classList.add('border-fit-content');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
            this.applyMessageBackground(message);
        });
    }
    
    getAnimationName(animationType) {
        const animationMap = {
            'slide': 'slideIn',
            'slide-right': 'slideInRight',
            'slide-up': 'slideInUp',
            'slide-down': 'slideDown',
            'fade': 'fadeIn',
            'bounce': 'bounceIn',
            'scale': 'scaleIn',
            'rotate': 'rotate',
            'flip': 'flip',
            'zoom': 'zoom',
            'elastic': 'elastic',
            'back': 'back',
            // –ê–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            'fade-out': 'fadeOut',
            'slide-out-left': 'slideOutLeft',
            'slide-out-right': 'slideOutRight',
            'slide-out-up': 'slideOutUp',
            'slide-out-down': 'slideOutDown',
            'scale-out': 'scaleOut',
            'rotate-out': 'rotateOut',
            'flip-out': 'flipOut',
            'zoom-out': 'zoomOut',
            'elastic-out': 'elasticOut',
            'back-out': 'backOut'
        };
        return animationMap[animationType] || 'slideIn';
    }
    
    getInitialTransform(animationType) {
        const transformMap = {
            'slide': 'translateX(-50px)',
            'slide-right': 'translateX(50px)',
            'slide-up': 'translateY(50px)',
            'slide-down': 'translateY(-100%)',
            'fade': 'translateX(0)',
            'bounce': 'scale(0.3)',
            'scale': 'scale(0.8)',
            'rotate': 'rotate(-180deg)',
            'flip': 'perspective(400px) rotateY(-90deg)',
            'zoom': 'scale(0.5)',
            'elastic': 'scale(0)',
            'back': 'translateX(-100px) scale(0.8)'
        };
        return transformMap[animationType] || 'translateX(-50px)';
    }
    
    // –ú–µ—Ç–æ–¥ fetchTwitchBadges —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SVG –∑–Ω–∞—á–∫–∏
    
    // –ú–µ—Ç–æ–¥ transformBadgeData —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SVG –∑–Ω–∞—á–∫–∏
    
    // –ú–µ—Ç–æ–¥ getChannelId —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SVG –∑–Ω–∞—á–∫–∏
    
    addChatMessage(username, text, userData = {}) {
        console.log('addChatMessage called:', username, text, userData);
        if (!this.chatMessagesElement) {
            console.error('chatMessagesElement is null!');
            return;
        }
        
        const messageElement = document.createElement('div');
        messageElement.className = 'message';
        messageElement.setAttribute('data-nick', username);
        messageElement.setAttribute('data-time', Date.now());
        if (userData.id) {
            messageElement.setAttribute('data-id', userData.id);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
        if (this.settings.appearAnimation !== 'none') {
            const animationName = this.getAnimationName(this.settings.appearAnimation);
            const animationDuration = `${this.settings.appearDuration}ms`;
            const animationDelay = this.settings.appearDelay > 0 ? `${this.settings.appearDelay}ms` : '0ms';
            
            console.log('Applying animation:', this.settings.appearAnimation, '->', animationName);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
            messageElement.style.animation = '';
            messageElement.style.animationName = '';
            messageElement.style.animationDuration = '';
            messageElement.style.animationDelay = '';
            messageElement.style.animationFillMode = '';
            messageElement.style.animationTimingFunction = '';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            messageElement.style.opacity = '0';
            messageElement.style.transform = this.getInitialTransform(this.settings.appearAnimation);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
            messageElement.style.animation = `${animationName} ${animationDuration} ease-out ${animationDelay} forwards`;
            
            // Fallback: –µ—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            setTimeout(() => {
                if (messageElement.style.opacity === '0' || getComputedStyle(messageElement).opacity === '0') {
                    messageElement.style.opacity = '1';
                    messageElement.style.transform = 'translateX(0)';
                    messageElement.style.animation = '';
                }
            }, this.settings.appearDuration + this.settings.appearDelay + 100);
        } else {
            // –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–ù–µ—Ç", –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
            messageElement.style.opacity = '1';
            messageElement.style.transform = 'translateX(0)';
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.applyMessageBackground(messageElement);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        messageElement.classList.add(`align-${this.settings.messageAlignment}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–º–∫–∏
        if (this.settings.borderMode === 'full-width') {
            messageElement.classList.add('border-full-width');
        } else {
            messageElement.classList.add('border-fit-content');
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ä–∞–º–∫–∏
        messageElement.classList.add(`border-align-${this.settings.borderAlignment}`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        messageElement.style.fontFamily = this.settings.fontFamily;
        messageElement.style.fontSize = this.settings.fontSize + 'px';
        messageElement.style.fontWeight = this.settings.fontWeight;
        messageElement.style.lineHeight = this.settings.lineHeight;
        messageElement.style.letterSpacing = this.settings.letterSpacing + 'px';
        messageElement.style.color = this.settings.fontColor;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userColor = userData.color || this.getDefaultUserColor(username);
        
        // –°–æ–∑–¥–∞–µ–º –±–µ–π–¥–∂–∏–∫–∏
        const badges = this.createUserBadges(userData, username);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º display-name –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ username
        const displayName = userData['display-name'] || username;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const processedText = this.processEmotes(text, userData);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ ACTION —Å–æ–æ–±—â–µ–Ω–∏–π (/me)
        let messageHtml = '';
        if (/^\x01ACTION.*\x01$/.test(text)) {
            const actionText = text.replace(/^\x01ACTION/, '').replace(/\x01$/, '').trim();
            const processedActionText = this.processEmotes(actionText, userData);
            messageHtml = `<span class="username" style="color: ${userColor}">${badges}${this.escapeHtml(displayName)}</span> <span class="text" style="color: ${userColor}">${processedActionText}</span>`;
        } else {
            messageHtml = `<span class="username" style="color: ${userColor}">${badges}${this.escapeHtml(displayName)}:</span><span class="text">${processedText}</span>`;
        }
        
        messageElement.innerHTML = messageHtml;
        
        this.chatMessagesElement.appendChild(messageElement);
        this.messageCount++;
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        this.syncMessageCount();
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
        this.limitChatMessages();
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —É–¥–∞–ª—è–µ–º –∏—Ö —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        if (this.settings.fadeMessages) {
            const totalDisplayTime = this.settings.messageDisplayTime * 1000;
            setTimeout(() => {
                if (this.settings.disappearAnimation !== 'none') {
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                    const animationName = this.getAnimationName(this.settings.disappearAnimation);
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å—Ç–∏–ª–∏
                    messageElement.style.animation = '';
                    messageElement.style.animationName = '';
                    messageElement.style.animationDuration = '';
                    messageElement.style.animationDelay = '';
                    messageElement.style.animationFillMode = '';
                    messageElement.style.animationTimingFunction = '';
                    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–π –ø–æ—è–≤–ª–µ–Ω–∏—è
                    messageElement.classList.remove('no-animation');
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                    messageElement.style.animation = `${animationName} ${this.settings.disappearDuration}ms ease-in forwards`;
                    setTimeout(() => {
                        if (messageElement.parentNode) {
                            messageElement.parentNode.removeChild(messageElement);
                            this.syncMessageCount(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                        }
                    }, this.settings.disappearDuration);
                } else {
                    // –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
                    if (messageElement.parentNode) {
                        messageElement.parentNode.removeChild(messageElement);
                        this.syncMessageCount(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                    }
                }
            }, totalDisplayTime);
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        this.syncMessageCount(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        if (this.messageCount > this.maxMessages) {
            const firstMessage = this.chatMessagesElement.querySelector('.message');
            if (firstMessage) {
                if (this.settings.fadeMessages && this.settings.disappearAnimation !== 'none') {
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                    const animationName = this.getAnimationName(this.settings.disappearAnimation);
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å—Ç–∏–ª–∏
                    firstMessage.style.animation = '';
                    firstMessage.style.animationName = '';
                    firstMessage.style.animationDuration = '';
                    firstMessage.style.animationDelay = '';
                    firstMessage.style.animationFillMode = '';
                    firstMessage.style.animationTimingFunction = '';
                    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–π –ø–æ—è–≤–ª–µ–Ω–∏—è
                    firstMessage.classList.remove('no-animation');
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                    firstMessage.style.animation = `${animationName} ${this.settings.disappearDuration}ms ease-in forwards`;
                    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                    setTimeout(() => {
                        if (firstMessage.parentNode) {
                            firstMessage.remove();
                            this.syncMessageCount(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                        }
                    }, this.settings.disappearDuration);
                } else {
                    // –û–±—ã—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
                    firstMessage.remove();
                    this.syncMessageCount(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                }
            }
        }
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        this.chatMessagesElement.scrollTop = this.chatMessagesElement.scrollHeight;
    }
    
    getDefaultUserColor(username) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const colors = [
            '#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF',
            '#FFA500', '#800080', '#FFC0CB', '#A52A2A', '#808080', '#000000'
        ];
        
        let hash = 0;
        for (let i = 0; i < username.length; i++) {
            hash = username.charCodeAt(i) + ((hash << 5) - hash);
        }
        
        return colors[Math.abs(hash) % colors.length];
    }
    
    createUserBadges(userData, username) {
        let badges = '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–Ω–∞—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (!this.settings.showUserBadges) {
            return badges;
        }
        
        const badgeElements = [];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Twitch –±–µ–π–¥–∂–µ–π –∏–∑ IRC —Ç–µ–≥–æ–≤
        if (typeof(userData.badges) === 'string') {
            const priorityBadges = ['predictions', 'admin', 'global_mod', 'staff', 'twitchbot', 'broadcaster', 'moderator', 'vip'];
            const twitchBadges = [];
            const otherBadges = [];
            
            userData.badges.split(',').forEach(badge => {
                const [badgeType, badgeVersion] = badge.split('/');
                const badgeUrl = this.getBadgeUrl(badgeType, badgeVersion);
                
                if (badgeUrl) {
                    const badgeObj = {
                        type: 'twitch',
                        description: badgeType,
                        url: badgeUrl,
                        priority: priorityBadges.includes(badgeType)
                    };
                    
                    if (badgeObj.priority) {
                        twitchBadges.push(badgeObj);
                    } else {
                        otherBadges.push(badgeObj);
                    }
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –±–µ–π–¥–∂–∏
            twitchBadges.forEach(badge => {
                badgeElements.push(`<img class="badge" src="${badge.url}" alt="${badge.description}" title="${badge.description}" />`);
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±–µ–π–¥–∂–∏ (FFZ, BTTV, 7TV, Chatterino)
        if (this.userBadges && this.userBadges[username]) {
            this.userBadges[username].forEach(badge => {
                let badgeHtml = `<img class="badge" src="${badge.url}" alt="${badge.description}" title="${badge.description}"`;
                if (badge.color) {
                    badgeHtml += ` style="background-color: ${badge.color};"`;
                }
                badgeHtml += ' />';
                badgeElements.push(badgeHtml);
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ Twitch –±–µ–π–¥–∂–∏
        if (typeof(userData.badges) === 'string') {
            const priorityBadges = ['predictions', 'admin', 'global_mod', 'staff', 'twitchbot', 'broadcaster', 'moderator', 'vip'];
            userData.badges.split(',').forEach(badge => {
                const [badgeType, badgeVersion] = badge.split('/');
                if (!priorityBadges.includes(badgeType)) {
                    const badgeUrl = this.getBadgeUrl(badgeType, badgeVersion);
                    if (badgeUrl) {
                        badgeElements.push(`<img class="badge" src="${badgeUrl}" alt="${badgeType}" title="${badgeType}" />`);
                    }
                }
            });
        }
        
        return badgeElements.join('') + (badgeElements.length > 0 ? ' ' : '');
    }
    
    getBadgeUrl(badgeType, badgeVersion) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –±–µ–π–¥–∂–µ–π
        const channelId = this.channelId || 'global';
        const badges = this.badgeCache.get(channelId);
        
        console.log('–ò—â–µ–º –∑–Ω–∞—á–æ–∫:', badgeType, badgeVersion, '–≤ –∫—ç—à–µ:', channelId);
        
        if (badges) {
        // –ò—â–µ–º –±–µ–π–¥–∂ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª—å–Ω—ã—Ö –±–µ–π–¥–∂–∞—Ö
        let badgeSet = badges.global[badgeType] || badges.channel[badgeType];
        
        if (badgeSet && badgeSet.versions) {
            const version = badgeSet.versions[badgeVersion] || badgeSet.versions['1'];
                const url = version?.image_url_1x || version?.image_url_2x || version?.image_url_4x;
                if (url) {
                    console.log('–ù–∞–π–¥–µ–Ω –∑–Ω–∞—á–æ–∫ –≤ –∫—ç—à–µ:', url);
                    return url;
                }
            }
        }
        
        // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ URL –∑–Ω–∞—á–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ)
        const knownBadgeUrls = {
            'broadcaster': 'https://static-cdn.jtvnw.net/badges/v1/5527c58c-fb7d-422d-b71b-f309dcb85cc1/2',
            'moderator': 'https://static-cdn.jtvnw.net/badges/v1/3267646d-33f0-4b17-b3df-f923a41db1d0/1',
            'vip': 'https://static-cdn.jtvnw.net/badges/v1/b817aba4-fad8-49e2-b88a-7cc744dfa6ec/1',
            'subscriber': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/1'
        };
        
        const fallbackUrl = knownBadgeUrls[badgeType];
        if (fallbackUrl) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback URL –¥–ª—è:', badgeType, fallbackUrl);
            return fallbackUrl;
        }
        
        console.log('–ó–Ω–∞—á–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', badgeType, badgeVersion);
        return null;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±–µ–π–¥–∂–∏ (FFZ, BTTV, 7TV, Chatterino)
    loadUserBadges(nick, userId) {
        if (!this.userBadges) this.userBadges = {};
        this.userBadges[nick] = [];
        
        // FFZ –±–µ–π–¥–∂–∏
        fetch('https://api.frankerfacez.com/v1/user/' + nick)
            .then(res => res.json())
            .then(res => {
                if (res.badges) {
                    Object.entries(res.badges).forEach(badge => {
                        const userBadge = {
                            description: badge[1].title,
                            url: 'https:' + badge[1].urls['4'],
                            color: badge[1].color
                        };
                        if (!this.userBadges[nick].includes(userBadge)) {
                            this.userBadges[nick].push(userBadge);
                        }
                    });
                }
            })
            .catch(err => console.error('FFZ badges error:', err));
        
        // FFZ:AP –±–µ–π–¥–∂–∏
        if (this.ffzapBadges) {
            this.ffzapBadges.forEach(user => {
                if (user.id.toString() === userId) {
                    let color = '#755000';
                    if (user.tier == 2) color = (user.badge_color || '#755000');
                    else if (user.tier == 3) {
                        if (user.badge_is_colored == 0) color = (user.badge_color || '#755000');
                        else color = false;
                    }
                    const userBadge = {
                        description: 'FFZ:AP Badge',
                        url: 'https://api.ffzap.com/v1/user/badge/' + userId + '/3',
                        color: color
                    };
                    if (!this.userBadges[nick].includes(userBadge)) {
                        this.userBadges[nick].push(userBadge);
                    }
                }
            });
        }
        
        // BTTV –±–µ–π–¥–∂–∏
        if (this.bttvBadges) {
            this.bttvBadges.forEach(user => {
                if (user.name === nick) {
                    const userBadge = {
                        description: user.badge.description,
                        url: user.badge.svg
                    };
                    if (!this.userBadges[nick].includes(userBadge)) {
                        this.userBadges[nick].push(userBadge);
                    }
                }
            });
        }
        
        // 7TV –±–µ–π–¥–∂–∏
        if (this.seventvBadges) {
            this.seventvBadges.forEach(badge => {
                badge.users.forEach(user => {
                    if (user === nick) {
                        const userBadge = {
                            description: badge.tooltip,
                            url: badge.urls[2][1]
                        };
                        if (!this.userBadges[nick].includes(userBadge)) {
                            this.userBadges[nick].push(userBadge);
                        }
                    }
                });
            });
        }
        
        // Chatterino –±–µ–π–¥–∂–∏
        if (this.chatterinoBadges) {
            this.chatterinoBadges.forEach(badge => {
                badge.users.forEach(user => {
                    if (user === userId) {
                        const userBadge = {
                            description: badge.tooltip,
                            url: badge.image3 || badge.image2 || badge.image1
                        };
                        if (!this.userBadges[nick].includes(userBadge)) {
                            this.userBadges[nick].push(userBadge);
                        }
                    }
                });
            });
        }
    }
    
        // –ó–∞–≥—Ä—É–∂–∞–µ–º cheers/bits - –∏—Å–ø–æ–ª—å–∑—É–µ–º API –∫–∞–∫ –≤ jChat
    loadCheers(channelId) {
        this.cheers = {};
        
        // Twitch API v5 –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CORS –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
        console.log('Using fallback cheers for channel:', this.channel);
        this.cheers = {
                    'cheer': {
                        1: {
                            image: 'https://d3aqoihi2n8ty8.cloudfront.net/actions/cheer/dark/animated/1/4.gif',
                            color: '#979797'
                        },
                        100: {
                            image: 'https://d3aqoihi2n8ty8.cloudfront.net/actions/cheer/dark/animated/100/4.gif',
                            color: '#9c3ee8'
                        },
                        1000: {
                            image: 'https://d3aqoihi2n8ty8.cloudfront.net/actions/cheer/dark/animated/1000/4.gif',
                            color: '#1db2a5'
                        },
                        5000: {
                            image: 'https://d3aqoihi2n8ty8.cloudfront.net/actions/cheer/dark/animated/5000/4.gif',
                            color: '#0099fe'
                        },
                        10000: {
                            image: 'https://d3aqoihi2n8ty8.cloudfront.net/actions/cheer/dark/animated/10000/4.gif',
                            color: '#f43021'
                        },
                        100000: {
                            image: 'https://d3aqoihi2n8ty8.cloudfront.net/actions/cheer/dark/animated/100000/4.gif',
                            color: '#ffd700'
                        }
                    }
                };
                console.log('Using fallback cheers for channel:', this.channel);
    }
    
    getBadgeTitle(badgeType, badgeVersion) {
        const titles = {
            'broadcaster': '–°—Ç—Ä–∏–º–µ—Ä',
            'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
            'vip': 'VIP',
            'subscriber': `–ü–æ–¥–ø–∏—Å—á–∏–∫ (${badgeVersion} –º–µ—Å.)`,
            'turbo': 'Turbo',
            'premium': 'Prime',
            'prime': 'Prime',
            'bits': `Bits (${badgeVersion})`,
            'sub-gift-leader': '–õ–∏–¥–µ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤',
            'sub-gifter': '–î–∞—Ä–∏—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–æ–∫'
        };
        
        return titles[badgeType] || badgeType;
    }
    
    getFallbackBadge(badgeType) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –∑–Ω–∞—á–∫–∏ Twitch (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ)
        const badgeUrls = {
            'broadcaster': 'https://static-cdn.jtvnw.net/badges/v1/5527c58c-fb7d-422d-b71b-f309dcb85cc1/2',
            'moderator': 'https://static-cdn.jtvnw.net/badges/v1/3267646d-33f0-4b17-b3df-f923a41db1d0/1',
            'vip': 'https://static-cdn.jtvnw.net/badges/v1/b817aba4-fad8-49e2-b88a-7cc744dfa6ec/1',
            'subscriber': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/1'
        };
        
        const badgeTitles = {
            'broadcaster': '–°—Ç—Ä–∏–º–µ—Ä',
            'moderator': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
            'vip': 'VIP',
            'subscriber': '–ü–æ–¥–ø–∏—Å—á–∏–∫'
        };
        
        const badgeUrl = badgeUrls[badgeType];
        if (badgeUrl) {
            return `<img src="${badgeUrl}" class="badge ${badgeType}" alt="${badgeType}" title="${badgeTitles[badgeType]}" style="width: 1em; height: 1em;" />`;
        }
        
        return ''; // –ï—Å–ª–∏ –∑–Ω–∞—á–∫–∞ –Ω–µ—Ç - –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –æ–±—Ä–∞–∑—Ü—É jChat v2
    processEmotes(text, userData = {}) {
        if (!text) return text;
        
        let message = text;
        let replacements = {};
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Twitch —ç–º–æ–¥–∑–∏ –∏–∑ IRC —Ç–µ–≥–æ–≤
        if (typeof(userData.emotes) === 'string') {
            userData.emotes.split('/').forEach(emoteData => {
                const twitchEmote = emoteData.split(':');
                const indexes = twitchEmote[1].split(',')[0].split('-');
                const emojis = new RegExp('[\u1000-\uFFFF]+', 'g');
                const aux = message.replace(emojis, ' ');
                const emoteCode = aux.substr(indexes[0], indexes[1] - indexes[0] + 1);
                replacements[emoteCode] = '<img class="emote" src="https://static-cdn.jtvnw.net/emoticons/v2/' + twitchEmote[0] + '/default/dark/3.0" />';
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ BTTV, FFZ, 7TV —ç–º–æ–¥–∑–∏
        if (this.emotes) {
        Object.entries(this.emotes).forEach(emote => {
                if (message.search(this.escapeRegExp(emote[0])) > -1) {
                if (emote[1].upscale) {
                    replacements[emote[0]] = '<img class="emote upscale" src="' + emote[1].image + '" />';
                } else if (emote[1].zeroWidth) {
                    replacements[emote[0]] = '<img class="emote" data-zw="true" src="' + emote[1].image + '" />';
                } else {
                    replacements[emote[0]] = '<img class="emote" src="' + emote[1].image + '" />';
                }
            }
        });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Bits/Cheers
        if (userData.bits && parseInt(userData.bits) > 0) {
            const bits = parseInt(userData.bits);
            let parsed = false;
            
            if (this.cheers) {
                for (const cheerType of Object.entries(this.cheers)) {
                    const regex = new RegExp(cheerType[0] + "\\d+\\s*", 'ig');
                    if (message.search(regex) > -1) {
                        message = message.replace(regex, '');
                        
                        if (!parsed) {
                            let closest = 1;
                            for (const cheerTier of Object.keys(cheerType[1]).map(Number).sort((a, b) => a - b)) {
                                if (bits >= cheerTier) closest = cheerTier;
                                else break;
                            }
                            message = '<img class="cheer_emote" src="' + cheerType[1][closest].image + '" /><span class="cheer_bits" style="color: ' + cheerType[1][closest].color + ';">' + bits + '</span> ' + message;
                            parsed = true;
                        }
                    }
                }
            }
        }
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
        message = this.escapeHtml(message);
        
        // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏
        const replacementKeys = Object.keys(replacements);
        replacementKeys.sort(function(a, b) {
            return b.length - a.length;
        });
        
        replacementKeys.forEach(replacementKey => {
            const regex = new RegExp("(?<!\\S)(" + this.escapeRegExp(replacementKey) + ")(?!\\S)", 'g');
            message = message.replace(regex, replacements[replacementKey]);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ twemoji)
        if (typeof twemoji !== 'undefined') {
            message = twemoji.parse(message);
        }
        
        return message;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏
    createEmoteMap() {
        const emoteMap = new Map();
        
        // –î–æ–±–∞–≤–ª—è–µ–º 7TV —ç–º–æ–¥–∑–∏
        [...this.sevenTVGlobalEmotes, ...this.sevenTVChannelEmotes].forEach(emote => {
            if (emote && emote.name) {
                emoteMap.set(emote.name, {
                    type: '7tv',
                    id: emote.id,
                    name: emote.name,
                    url: `https://cdn.7tv.app/emote/${emote.id}/1x.webp`
                });
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º BTTV —ç–º–æ–¥–∑–∏
        [...this.bttvGlobalEmotes, ...this.bttvChannelEmotes, ...this.bttvSharedEmotes].forEach(emote => {
            if (emote && emote.code) {
                emoteMap.set(emote.code, {
                    type: 'bttv',
                    id: emote.id,
                    name: emote.code,
                    url: `https://cdn.betterttv.net/emote/${emote.id}/1x`
                });
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º FFZ —ç–º–æ–¥–∑–∏
        [...this.ffzGlobalEmotes, ...this.ffzChannelEmotes].forEach(emote => {
            if (emote && emote.name && emote.urls && emote.urls['1']) {
                emoteMap.set(emote.name, {
                    type: 'ffz',
                    id: emote.id,
                    name: emote.name,
                    url: `https:${emote.urls['1']}`
                });
            }
        });
        
        return emoteMap;
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    replaceEmotes(text, emoteMap) {
        let processedText = text;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –¥–ª–∏–Ω–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
        const sortedEmotes = Array.from(emoteMap.entries()).sort((a, b) => b[0].length - a[0].length);
        
        for (const [emoteName, emoteData] of sortedEmotes) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            const regex = new RegExp(`\\b${this.escapeRegExp(emoteName)}\\b`, 'g');
            if (regex.test(processedText)) {
                const emoteHtml = `<img src="${emoteData.url}" class="emote" alt="${emoteData.name}" title="${emoteData.name}" style="height: 1.2em; vertical-align: middle;" />`;
                processedText = processedText.replace(regex, emoteHtml);
            }
        }
        
        return processedText;
    }
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —ç–º–æ–¥–∑–∏
    testEmotes() {
        console.log('Testing emotes...');
        console.log('7TV Global:', this.sevenTVGlobalEmotes.length);
        console.log('7TV Channel:', this.sevenTVChannelEmotes.length);
        console.log('BTTV Global:', this.bttvGlobalEmotes.length);
        console.log('BTTV Channel:', this.bttvChannelEmotes.length);
        console.log('BTTV Shared:', this.bttvSharedEmotes.length);
        console.log('FFZ Global:', this.ffzGlobalEmotes.length);
        console.log('FFZ Channel:', this.ffzChannelEmotes.length);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç–º–æ–¥–∑–∏
        const testText = 'Hello PogChamp Kappa monkaS 5Head OMEGALUL';
        const processedText = this.processEmotes(testText);
        console.log('Original:', testText);
        console.log('Processed:', processedText);
    }
    
    
    
    addSystemMessage(text) {
        console.log('addSystemMessage called:', text);
        if (!this.chatMessagesElement) {
            console.error('chatMessagesElement is null in addSystemMessage!');
            return;
        }
        
        const messageElement = document.createElement('div');
        messageElement.className = 'message system-message';
        messageElement.innerHTML = `
            <span class="text" style="color: #ffd700; font-style: italic;">${this.escapeHtml(text)}</span>
        `;
        
        this.chatMessagesElement.appendChild(messageElement);
        this.chatMessagesElement.scrollTop = this.chatMessagesElement.scrollHeight;
        console.log('System message added to DOM');
    }
    
    
    showError(message) {
        console.error(message);
        this.addSystemMessage(`‚ùå –û—à–∏–±–∫–∞: ${message}`);
    }
    
    showSuccess(message) {
        console.log(message);
        this.addSystemMessage(`‚úÖ ${message}`);
    }
    
    applyMessageBackground(messageElement) {
        // –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const backgrounds = [];
        
        if (this.settings.messageBackgroundImage1) {
            backgrounds.push(`url(${this.settings.messageBackgroundImage1})`);
        }
        
        if (this.settings.messageBackgroundImage2) {
            backgrounds.push(`url(${this.settings.messageBackgroundImage2})`);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –∏–ª–∏ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        if (this.settings.messageBackgroundGradient !== 'none') {
            const gradient = this.createGradient(
                this.settings.messageBackgroundGradient,
                this.settings.messageGradientColor1,
                this.settings.messageGradientColor2,
                this.settings.messageGradientDirection
            );
            backgrounds.push(gradient);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è fallback
            messageElement.style.setProperty('--message-gradient-color-1', this.settings.messageGradientColor1);
            messageElement.style.setProperty('--message-gradient-color-2', this.settings.messageGradientColor2);
            messageElement.style.setProperty('--message-gradient-direction', this.settings.messageGradientDirection);
        } else {
            // –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            const baseColor = this.hexToRgba(this.settings.messageBackgroundColor, this.settings.messageBackgroundOpacity / 100);
            messageElement.style.backgroundColor = baseColor;
        }
        
        if (backgrounds.length > 0) {
            messageElement.style.backgroundImage = backgrounds.join(', ');
            messageElement.style.backgroundSize = `${this.settings.messageBgSize1}, ${this.settings.messageBgSize2}`;
            messageElement.style.backgroundPosition = `${this.settings.messageBgPosition1}, ${this.settings.messageBgPosition2}`;
        }
        
    }
    
    hexToRgba(hex, alpha) {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    createGradient(gradientType, color1, color2, direction) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        const testElement = document.createElement('div');
        const hasGradientSupport = testElement.style.background && 
            (testElement.style.background.includes('gradient') || 
             testElement.style.backgroundImage);
        
        if (!hasGradientSupport) {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏–ª–∏ OBS
            return color1;
        }
        
        switch (gradientType) {
            case 'linear':
                // –£–ø—Ä–æ—â–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                let simplifiedDirection = direction;
                if (direction === 'to right') simplifiedDirection = '90deg';
                else if (direction === 'to left') simplifiedDirection = '270deg';
                else if (direction === 'to bottom') simplifiedDirection = '180deg';
                else if (direction === 'to top') simplifiedDirection = '0deg';
                else if (direction === 'to bottom right') simplifiedDirection = '135deg';
                else if (direction === 'to bottom left') simplifiedDirection = '225deg';
                else if (direction === 'to top right') simplifiedDirection = '45deg';
                else if (direction === 'to top left') simplifiedDirection = '315deg';
                
                return `linear-gradient(${simplifiedDirection}, ${color1}, ${color2})`;
            case 'radial':
                return `radial-gradient(circle at center, ${color1}, ${color2})`;
            case 'conic':
                // Conic –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –≤ OBS
                return `linear-gradient(45deg, ${color1}, ${color2})`;
            default:
                return color1;
        }
    }
    
    showInfo(message) {
        console.log(message);
        this.addSystemMessage(`‚ÑπÔ∏è ${message}`);
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
    clearMessage(messageId) {
        setTimeout(() => {
            const messageElement = this.chatMessagesElement.querySelector(`[data-id="${messageId}"]`);
            if (messageElement) {
                messageElement.remove();
                this.syncMessageCount();
            }
        }, 200);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    clearChat(username) {
        setTimeout(() => {
            const userMessages = this.chatMessagesElement.querySelectorAll(`[data-nick="${username}"]`);
            userMessages.forEach(message => {
                message.remove();
            });
            this.syncMessageCount();
        }, 200);
    }
    
    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑-–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π OAuth
    async getChannelId() {
        // Twitch Helix API —Ç—Ä–µ–±—É–µ—Ç OAuth —Ç–æ–∫–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        // –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ ID –¥–ª—è –¥—Ä—É–≥–∏—Ö API
        console.log('Using channel name as ID (Helix API requires OAuth):', this.channel);
        console.log('‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ Twitch API –Ω—É–∂–µ–Ω OAuth —Ç–æ–∫–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ.');
        return this.channel;
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–µ–π–¥–∂–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º API –∫–∞–∫ –≤ jChat
    loadAdditionalBadges() {
        // FFZ:AP –±–µ–π–¥–∂–∏ - –∫–∞–∫ –≤ jChat
        fetch('https://api.ffzap.com/v1/supporters')
            .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                this.ffzapBadges = res || [];
                console.log('FFZ:AP badges loaded:', this.ffzapBadges.length);
            })
            .catch(err => {
                console.warn('FFZ:AP badges error:', err.message);
                this.ffzapBadges = [];
            });
        
        // BTTV –±–µ–π–¥–∂–∏ - –∫–∞–∫ –≤ jChat
        fetch('https://api.betterttv.net/3/cached/badges')
            .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                this.bttvBadges = res || [];
                console.log('BTTV badges loaded:', this.bttvBadges.length);
            })
            .catch(err => {
                console.warn('BTTV badges error:', err.message);
                this.bttvBadges = [];
            });
        
        // 7TV –±–µ–π–¥–∂–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API v3
        fetch('https://7tv.io/v3/badges')
            .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                this.seventvBadges = res || [];
                console.log('7TV badges loaded:', this.seventvBadges.length);
            })
            .catch(err => {
                console.warn('7TV badges error:', err.message);
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API
                return fetch('https://api.7tv.app/v2/badges?user_identifier=login')
                    .then(res => res.json())
                    .then(res => {
                        this.seventvBadges = res.badges || [];
                        console.log('7TV badges loaded (fallback):', this.seventvBadges.length);
                    })
                    .catch(err2 => {
                        console.warn('7TV badges fallback error:', err2.message);
                        this.seventvBadges = [];
                    });
            });
        
        // Chatterino –±–µ–π–¥–∂–∏ - –∫–∞–∫ –≤ jChat
        fetch('https://api.chatterino.com/badges')
            .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                this.chatterinoBadges = res.badges || [];
                console.log('Chatterino badges loaded:', this.chatterinoBadges.length);
            })
            .catch(err => {
                console.warn('Chatterino badges error:', err.message);
                this.chatterinoBadges = [];
            });
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–π–¥–∂–µ–π Twitch —á–µ—Ä–µ–∑ API - –∫–∞–∫ –≤ jChat
    loadBadges(channelId) {
        this.badges = {};
        
        // Twitch badges API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CORS –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
        console.log('Using fallback badges for channel:', this.channel);
        this.badges = {
            'broadcaster:1': 'https://static-cdn.jtvnw.net/badges/v1/5527c58c-fb7d-422d-b71b-f309dcb85cc1/2',
            'moderator:1': 'https://static-cdn.jtvnw.net/badges/v1/3267646d-33f0-4b17-b3df-f923a41db1d0/1',
            'vip:1': 'https://static-cdn.jtvnw.net/badges/v1/b817aba4-fad8-49e2-b88a-7cc744dfa6ec/1',
            'subscriber:1': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/1',
            'subscriber:2': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/2',
            'subscriber:3': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/3',
            'subscriber:6': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/6',
            'subscriber:12': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/12',
            'subscriber:24': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/24',
            'subscriber:36': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/36',
            'subscriber:48': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/48',
            'subscriber:60': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/60',
            'subscriber:72': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/72',
            'subscriber:84': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/84',
            'subscriber:96': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/96',
            'subscriber:108': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/108',
            'subscriber:120': 'https://static-cdn.jtvnw.net/badges/v1/5d9f2208-5dd8-11e7-8513-2ff4adfae661/120',
            'premium:1': 'https://static-cdn.jtvnw.net/badges/v1/bbbe0db0-a598-423e-86d0-f9fd98d5f39d/1',
            'bits:1': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/1',
            'bits:100': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/100',
            'bits:1000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/1000',
            'bits:5000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/5000',
            'bits:10000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/10000',
            'bits:25000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/25000',
            'bits:50000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/50000',
            'bits:100000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/100000',
            'bits:200000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/200000',
            'bits:300000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/300000',
            'bits:400000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/400000',
            'bits:500000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/500000',
            'bits:600000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/600000',
            'bits:700000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/700000',
            'bits:800000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/800000',
            'bits:900000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/900000',
            'bits:1000000': 'https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2d7a9d4e6d8d/1000000'
        };
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å FFZ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –±–µ–π–¥–∂–∏
        fetch(`https://api.frankerfacez.com/v1/room/${channelId}`)
            .then(res => {
                if (!res.ok) {
                    throw new Error(`HTTP ${res.status}`);
                }
                return res.json();
            })
            .then(res => {
                if (res.room) {
                    if (res.room.moderator_badge) {
                        this.badges['moderator:1'] = `https://cdn.frankerfacez.com/room-badge/mod/${this.channel}/4/rounded`;
                    }
                    if (res.room.vip_badge) {
                        this.badges['vip:1'] = `https://cdn.frankerfacez.com/room-badge/vip/${this.channel}/4`;
                    }
                }
                console.log('FFZ badges loaded for channel:', this.channel);
            })
            .catch(err => {
                console.warn('FFZ badges loading error:', err.message);
                // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–µ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç FFZ
            });
    }
    
    disconnect() {
        if (this.socket) {
            this.socket.close();
            this.socket = null;
        }
        this.isConnected = false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.twitchChat = new TwitchChat();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (window.twitchChat) {
        window.twitchChat.disconnect();
    }
});
